{"version":3,"sources":["store/index.js","components/header/header.js","components/header/index.js","components/city-card/card.js","components/city-card/index.js","components/cards-container/card-container.js","components/cards-container/index.js","components/forecast/forecast.js","components/forecast/index.js","components/footer/footer.js","components/footer/index.js","components/app/app.js","components/app/index.js","index.js"],"names":["Store","cities","client","ApolloClient","uri","this","city","setCity","query","gql","variables","newArr","filter","item","decorate","observable","action","addCity","getCurrentWeather","deleteCity","useStyles","makeStyles","theme","typographyStyles","flex","toolbarStyles","justifyContent","formStyles","display","paddingLeft","paddingRight","TextFieldStyles","marginRight","color","fontSize","appBarStyles","paddingTop","paddingBottom","circularProgress","marginLeft","headerLink","breakpoints","down","inputBtn","alignSelf","height","LinkBehavior","React","forwardRef","props","ref","to","observer","Header","useState","errorApi","setErrorApi","open","setOpen","showSpinner","setShowSpinner","IsValid","setIsValid","styles","alert","Collapse","in","Alert","severity","IconButton","aria-label","size","onClick","AppBar","className","position","Toolbar","Button","component","onSubmit","e","preventDefault","store","then","result","catch","error","noValidate","autoComplete","TextField","onChange","target","value","id","label","variant","helperText","InputProps","startAdornment","InputAdornment","type","startIcon","CircularProgress","root","minWidth","title","pos","marginBottom","cont","link","cardHeader","QUERY","CityCard","classes","useQuery","data","loading","message","iconUrl","weather","icon","description","wind","speed","Card","CardHeader","avatar","Avatar","src","Typography","CardContent","main","temp_c","CardActions","Link","margin","gridContainer","gridInner","alignItems","CardContainer","citiesCards","map","idx","Grid","key","xs","sm","md","container","spacing","length","bullet","transform","mainTitle","marginTop","Forecast","forecast","getWeather","list","date","moment","dt","format","gutterBottom","Box","text","padding","appBar","top","bottom","grow","flexGrow","Footer","href","configure","enforceActions","App","CssBaseline","direction","path","exact","render","match","params","Component","createMuiTheme","ReactDOM","basename","process","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.367fd19b.chunk.js","sourcesContent":["import { observable, action, decorate } from 'mobx';\nimport ApolloClient from 'apollo-boost';\nimport { gql } from 'apollo-boost';\n\nclass Store {\n  cities = [];\n\n  client = new ApolloClient({\n    uri: 'https://7b3u2.sse.codesandbox.io/',\n  });\n\n  setCity(cities) {\n    this.cities = cities;\n  }\n\n  addCity(city) {\n    this.setCity([city, ...this.cities]);\n  }\n\n  getCurrentWeather(city) {\n    return this.client.query({\n      query: gql`\n        query weather($city: String!) {\n          getCurrentWeather(cityName: $city) {\n            cod\n          }\n        }\n      `,\n      variables: { city },\n    });\n  }\n\n  deleteCity(city) {\n    const newArr = this.cities.filter((item) => item !== city);\n    this.setCity(newArr);\n  }\n}\n\ndecorate(Store, {\n  cities: observable,\n  setCity: action,\n  addCity: action,\n  getCurrentWeather: action,\n  deleteCity: action\n});\n\nexport default new Store();\n","import React, { useState } from 'react';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\nimport { observer } from 'mobx-react';\nimport store from '../../store';\nimport Collapse from '@material-ui/core/Collapse';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    typographyStyles: {\n      flex: 1,\n    },\n    toolbarStyles: {\n      justifyContent: 'space-between',\n    },\n    formStyles: {\n      display: 'flex',\n      paddingLeft: '20px',\n      paddingRight: '20px',\n    },\n    TextFieldStyles: {\n      marginRight: '15px',\n      color: '#ffffff',\n      fontSize: '20px',\n    },\n    appBarStyles: {\n      paddingTop: '10px',\n      paddingBottom: '10px',\n    },\n    circularProgress: {\n      marginLeft: '10px',\n    },\n    headerLink: {\n      fontSize: 26,\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    }\n    },\n    inputBtn: {\n      alignSelf: 'flex-start',\n      height: '60px'\n    }\n  };\n});\n\nconst LinkBehavior = React.forwardRef((props, ref) => (\n  <RouterLink ref={ref} to='/' {...props} />\n));\n\n\nfunction Header(props) {\n  const [city, setCity] = useState('');\n  const [errorApi, setErrorApi] = useState(false);\n  const [open, setOpen] = useState(true);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const [IsValid, setIsValid] = useState(true);\n\n  const styles = useStyles();\n\n  const alert = (\n    <Collapse in={open}>\n      <Alert\n        severity='error'\n        action={\n          <IconButton\n            aria-label='close'\n            color='inherit'\n            size='small'\n            onClick={() => {\n              setOpen(false);\n            }}\n          >\n            <CloseIcon fontSize='inherit'/>\n          </IconButton>\n        }\n      >\n        Undefined city!!!\n      </Alert>\n    </Collapse>\n  );\n  const sub = (e) => {\n    e.preventDefault();\n    if (city !== ''){\n      setShowSpinner(true);\n      setErrorApi(false);\n      store\n        .getCurrentWeather(city)\n        .then((result) => {\n          setShowSpinner(false);\n          setErrorApi(false);\n          store.addCity(city);\n          setErrorApi(false);\n          setCity('');\n          setIsValid(true)\n        })\n        .catch((error) => {\n          setShowSpinner(false);\n          setOpen(true);\n          setErrorApi(true);\n          setIsValid(false)\n        });\n    }else{\n      setIsValid(false)\n    }\n  };\n  return (\n    <AppBar className={styles.appBarStyles} position='static'>\n      <Toolbar className={styles.toolbarStyles}>\n        <Button\n          className={styles.headerLink}\n          color='secondary'\n          component={LinkBehavior}\n          to='/'\n        >\n          Weather APP\n        </Button>\n        <form\n          onSubmit={sub}\n          className={styles.formStyles}\n          noValidate\n          autoComplete='off'\n        >\n          <TextField\n            onChange={(e) => {\n              setCity(e.target.value);\n            }}\n            value={city}\n            id='input-with-icon-textfield'\n            label='Add location'\n            variant='outlined'\n            color='secondary'\n            error={!IsValid}\n            helperText={!IsValid ? 'Incorrect entry.' : null}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position='start'>\n                  <LocationCityIcon/>\n                </InputAdornment>\n              ),\n              className: styles.TextFieldStyles,\n            }}\n          />\n          <Button\n            variant='contained'\n            color='secondary'\n            type='submit'\n            size='large'\n            startIcon={<SaveIcon/>}\n            className={styles.inputBtn}\n          >\n            Add\n            {showSpinner ? (\n              <CircularProgress className={styles.circularProgress}/>\n            ) : null}\n          </Button>\n        </form>\n      </Toolbar>\n      {errorApi ? alert : null}\n    </AppBar>\n  );\n}\n\nexport default observer(Header);\n","import Header from './header';\r\n\r\nexport default Header;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport store from '../../store';\nimport { observer } from 'mobx-react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport Avatar from '@material-ui/core/Avatar';\nimport CardHeader from '@material-ui/core/CardHeader';\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  cont: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  link: {\n    fontSize: '20px'\n  },\n  cardHeader: {\n    fontSize: 22,\n    color: '#1D1AB2'\n  }\n});\n\nconst QUERY = gql`\n  query weather($city: String!) {\n    getCurrentWeather(cityName: $city) {\n      main {\n        temp_c\n      }\n      weather {\n            description\n            icon\n        }\n        wind {\n            speed\n        }\n    }\n  }\n`;\n\n\nfunction CityCard({city}) {\n\n  const classes = useStyles();\n  const {data, loading, error} = useQuery(QUERY, {\n    variables: {city},\n  });\n\n  if (loading) return <CircularProgress/>;\n  if (error) return `Error! ${error.message}`;\n\n  const iconUrl =\n    `http://openweathermap.org/img/w/${data.getCurrentWeather.weather[0].icon}.png`;\n  const description = data.getCurrentWeather.weather[0].description;\n  const wind = data.getCurrentWeather.wind.speed;\n\n  const LinkBehavior = React.forwardRef((props, ref) => (\n    <RouterLink ref={ref} to={`/${city}`} {...props} />\n  ));\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Avatar\n            src={iconUrl}\n            aria-label='recipe' />\n        }\n        title={\n          <Typography className={classes.cardHeader}>\n            {city}\n          </Typography>\n        }\n      />\n      <CardContent>\n        <Typography variant='h4' component='h2'>\n          {data.getCurrentWeather.main.temp_c} °C\n        </Typography>\n        <Typography variant='body2' component='p'>\n          {description}\n          <br/>\n          Wind {wind} m/s\n        </Typography>\n      </CardContent>\n      <CardActions className={classes.cont}>\n        <Link className={classes.link} color='secondary' component={LinkBehavior}>\n          5 day weather forecast\n        </Link>\n        <IconButton\n          color='secondary'\n          aria-label='delete'\n          className={classes.margin}\n          onClick={() => {\n            store.deleteCity(city);\n          }}\n          fontSize='large'\n        >\n          <DeleteIcon/>\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default observer(CityCard);\n","import CityCard from './card';\r\n\r\nexport default CityCard;\r\n","import React from 'react';\r\nimport CityCard from '../city-card';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  gridContainer: {\r\n    paddingLeft: '16px',\r\n    paddingRight: '16px',\r\n    paddingTop: '30px'\r\n  },\r\n  gridInner: {\r\n    alignItems: 'stretch'\r\n  }\r\n});\r\n\r\nconst CardContainer = ({cities}) => {\r\n  const styles = useStyles();\r\n  const citiesCards = cities.map((city, idx) => {\r\n    return (\r\n      <Grid key={idx} item xs={12} sm={6} md={4}>\r\n        <CityCard city={city}/>\r\n      </Grid>\r\n    )\r\n  });\r\n  return (\r\n    <div className={styles.gridContainer}>\r\n      <Grid container spacing={4} className={styles.gridInner}>\r\n        {\r\n          citiesCards.length === 0 \r\n          ? <Typography variant='h4' component='h2'>\r\n              Weather list is empty.\r\n              Please add city.\r\n            </Typography>\r\n          : citiesCards\r\n        }\r\n      </Grid>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default CardContainer;","import CardContainer from \"./card-container\";\r\n\r\nexport default CardContainer;","import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\nimport moment from 'moment';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport Box from '@material-ui/core/Box';\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  mainTitle: {\n    marginBottom: '20px',\n    marginTop: '20px'\n  },\n  gridContainer: {\n    paddingLeft: '16px',\n    paddingRight: '16px',\n    paddingTop: '30px'\n  },\n  gridInner: {\n    alignItems: 'stretch'\n  },\n  cardHeader: {\n    fontSize: 18,\n    color: '#1D1AB2'\n  }\n});\n\nconst QUERY = gql`\n  query weather($city: String!) {\n    getWeather(cityName: $city) {\n      list {\n        dt\n        main {\n          temp_c\n        }\n        weather {\n          description\n          icon\n        }\n        wind {\n          speed\n        }\n      }\n    }\n  }\n`;\n\nconst Forecast = ({ city }) => {\n  const { data, loading, error } = useQuery(QUERY, {\n    variables: { city },\n  });\n  const classes = useStyles();\n\n  if (loading) return <CircularProgress />;\n  if (error) return `Error! ${error.message}`;\n\n\n  const { getWeather: { list } } = data;\n\n  const forecast = list.map((item, idx) => {\n    const date = moment(item.dt * 1000).format('LLLL');\n    return (\n      <Grid key={idx} item xs={12} sm={6} md={4}>\n        <Card className={classes.root}>\n          <CardHeader\n            avatar={\n              <Avatar\n                src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                aria-label=\"recipe\" />\n            }\n            title={\n              <Typography className={classes.cardHeader}>\n                {date}\n              </Typography>\n            }\n          />\n          <CardContent>\n            <Typography className={classes.title} color='textSecondary' gutterBottom>\n              {item.weather[0].description}\n            </Typography>\n            <Typography variant='h5' component='h2'>\n              {item.main.temp_c} °C\n            </Typography>\n            <Typography variant='body2' component='p'>\n              Wind - {item.wind.speed} m/s\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    )\n  });\n\n  return (\n          <Box className={classes.gridContainer}>\n            <Typography className={classes.mainTitle} variant='h3' component='h1'>\n              5 day weather forecast {city}\n            </Typography>\n            <Grid item container spacing={4} className={classes.gridInner}>\n              {forecast}\n            </Grid>\n          </Box>\n  );\n};\n\nexport default Forecast;\n","import Forecast from \"./forecast\";\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AcUnitIcon from '@material-ui/icons/AcUnit';\r\nimport { Link } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  text: {\r\n    padding: theme.spacing(2, 2, 0),\r\n    fontSize: '20px'\r\n  },\r\n  appBar: {\r\n    top: 'auto',\r\n    bottom: 0,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <AcUnitIcon />\r\n        <Link\r\n          href='https://github.com/ivanovmain'\r\n          variant=\"body2\"\r\n          color='secondary'\r\n          className={classes.text}\r\n        >\r\n          {'GitHub '}\r\n        </Link>\r\n        <div className={classes.grow} />\r\n        <Typography\r\n          variant='body2'\r\n          component='p'\r\n          className={classes.text}\r\n        >\r\n          Created by Ivanov V.V\r\n          <br/>\r\n          Email:\r\n          <Link\r\n            href='mailto:ivanovvvmain@yandex.ru'\r\n            variant=\"body2\"\r\n            color='secondary'\r\n            className={classes.text}\r\n          >\r\n          {' ivanovvvmain@yandex.ru '}\r\n        </Link>\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n};\r\n\r\nexport default Footer;","import Footer from './footer';\r\n\r\nexport default Footer;","import React from 'react';\nimport { observer } from 'mobx-react';\nimport store from '../../store';\nimport { configure } from 'mobx';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Header from '../header';\nimport CardContainer from '../cards-container';\nimport { Route, Switch } from 'react-router-dom';\nimport Forecast from '../forecast';\nimport Footer from '../footer';\n\nconst client = new ApolloClient({\n  uri: 'https://7b3u2.sse.codesandbox.io/',\n\n});\n\nconfigure({ enforceActions: 'observed' });\n\n\nclass App extends React.Component {\n  render() {\n    const { cities } = store;\n    return (\n      <ApolloProvider client={client}>\n        <Box>\n          <CssBaseline/>\n          <Grid container direction='column'>\n            <Grid item>\n              <Header />\n            </Grid>\n            <Grid item container>\n              <Grid item xs={false} sm={2}/>\n              <Grid item xs={12} sm={8}>\n                <Switch>\n                  <Route path=\"/\"\n                         exact\n                         render={\n                           () => <CardContainer cities={cities}/>\n                         } />\n                  <Route path='/:city'\n                         render={\n                           ({match})=>{\n                             const { city } = match.params;\n                             return <Forecast city={city}/>\n                           }}/>\n                </Switch>\n              </Grid>\n              <Grid item xs={false} sm={2}/>\n            </Grid>\n          </Grid>\n          <Footer/>\n        </Box>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default observer(App);\n","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./components/app\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\n\r\nconst theme = createMuiTheme();\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <HashRouter basename={`${process.env.PUBLIC_URL}/`}>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </HashRouter>\r\n  , document.getElementById('root'));"],"sourceRoot":""}